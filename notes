=====NODE JS=====
Node.js was installed at

   /usr/local/bin/node

npm was installed at

   /usr/local/bin/npm

Make sure that /usr/local/bin is in your $PATH.

We use require to load in modules

The command line utility that allows nodejs code to run automatically while you make change is Nodemon and how it’s install is by running npm install nodemon -g (the -g stands for global and it’s installed in the nodejs directory).

Yargs was also used. Yargs helps build interactive command line tools by parsing arguments and generating an elegant user interface. 

npm init will create a json.package file in the working directory

You can use JSON.stringify(param1, param2, param3) to format object that needs to be printed on the screen.

Express- framework in nodejs to build web app.
hbs is a templating framework. Under hbs, we have what we called partial which is a partial piece of a website.

=====GIT====
git init - this needs to be executed from the root of your project
git add . - use this to tell Git the files you want to keep track of(. will track all files and folders in the working dir).
git status - to get the status of your git repo
git commit -am 'comment'
git push (This would push changes made to the repo)


To commit, use git commit -m (message) ‘themessage’ 
To push to GitHub, use git push

—Generating SSH Key—
ls -al ~/ .ssh would check if there’s ssh
to make a key 
	ssh-keygen -t rsa -b(byte) 4096 -C ‘email’
eval “$(ssh-agent -s)” will start the ssh agent service
To specify where the ssh file leaves you enter - ssh-add ~/ .ssh/id_rsa

=====Testing Node Applications=====
We’d be installing a module called mochajs.org
install it as npm install mocha —save-dev

Running the code using nodemon for mocha, use nodemon —exec ‘name of command’ e. nodemon —exec ’nom test’

===Testing the TODO App===
Installed Expect (for assertions) mocha (for the test swift) npm i install expect mocha superset —save-dev



===Things to be done for uploading to Heroku===
1.  Tell Heroku how to startup the project by including the "start" command under the script section of package.json file. This tells Heroku
    This is the command that'd be run when Heroku needs to start the application.
2.  Tell Heroku the version of Node you'd like to use. This is done by specifying the engines property in the package.json file.
3.  Setup a database.
heroku config - use to list configuration
heroku logs

===Security===
We Cryptojs for Web Tokens when it comes to Security (This is the node.js actual way of securing our web application,
there are better ways to doing this using some libraies out there, the one we'd be using is jsonwebtoken).
npm i crypto-js --save (use --save-dev for saving the dependency as a dev dependency).
npm i jsonwebtoken --save
You can validate your token from jwt.io by pasting in the signed data.
--Standard way to storing a user password is to Hash it, usually this can be done in the manual(HARD) way, but
we'd be using a library called "bcrypt", there are several ones out there but we'd be sticking with bcryptjs.
npm i bcryptjs --save

